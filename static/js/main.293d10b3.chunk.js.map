{"version":3,"sources":["AddDialog.js","toolbar.js","Table.js","genres.js","showAlert.js","filterList.js","actions.js","NewLogin.js","App.js","index.js"],"names":["AddUserDialog","props","addRow","add","data","id","setData","alertSetter","initialRow","Class","Title","Link","Notes","_id","useState","row","setRow","React","open","setOpen","handleClickOpen","handleClose","resetRow","handleSubmit","axios","post","then","response","console","log","status","objectID","ops","catch","err","handleChange","name","value","target","Tooltip","title","Button","className","onClick","variant","color","size","startIcon","fontSize","aria-label","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","TextField","autoFocus","margin","label","type","fullWidth","onChange","multiline","DialogActions","event","prev","map","oldrow","index","useToolbarStyles","makeStyles","theme","root","paddingLeft","spacing","paddingRight","highlight","palette","primary","main","backgroundColor","lighten","light","text","secondary","dark","flex","search","position","right","toolbar","top","zIndex","width","height","TableToolbar","classes","numSelected","deleteUserHandler","selectedRows","rows","handleFilterChange","filterInput","Toolbar","clsx","Typography","length","IconButton","Table","columns","updateMyData","setShowAlert","IndeterminateCheckbox","forwardRef","ref","indeterminate","rest","defaultRef","useRef","resolvedRef","useEffect","current","Checkbox","setFilterInput","useTable","useFilters","useSortBy","useRowSelect","hooks","allColumns","push","Header","getToggleAllRowsSelectedProps","maxwidth","Cell","getToggleRowSelectedProps","getTableProps","getTableBodyProps","headerGroups","prepareRow","setFilter","selectedFlatRows","selectedRowIds","state","Object","keys","window","confirm","newData","array","indexs","x","parseInt","filter","_","i","includes","list","original","result","show","message","e","undefined","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","isSorted","isSortedDesc","render","canFilter","getRowProps","cells","cell","getCellProps","ShowAlert","setter","Alert","severity","useStyles","formControl","display","selectEmpty","marginTop","Select","SelectColumnFilter","filterValue","preFilteredRows","options","useMemo","Set","forEach","values","FormControl","defaultValue","MenuItem","option","Actions","removeRow","loginUser","credentials","a","fetch","method","body","JSON","stringify","json","paper","flexDirection","alignItems","avatar","form","submit","NewLogin","setToken","username","setUserName","password","setPassword","preventDefault","token","Container","component","maxWidth","CssBaseline","Avatar","noValidate","onSubmit","required","autoComplete","Box","mt","App","showAlert","showValue","typeValue","msgValue","currentTarget","newArray","elem","newRow","concat","timeId","setTimeout","clearTimeout","accessor","Filter","href","getData","get","rowIndex","columnId","path","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.293d10b3.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport EditIcon from '@material-ui/icons/Edit';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport Button from '@material-ui/core/Button'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport TextField from '@material-ui/core/TextField'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport axios from 'axios'\n\nconst AddUserDialog = props => {\n    const { addRow, add, data, id, setData, alertSetter } = props\n    const initialRow = () => {\n        // creates blank fields to add new document\n        if (add) {\n            return {\n                Class: '',\n                Title: '',\n                Link: '',\n                Notes: '',\n                // _id: ''\n            }\n        } else {\n        // populates the dialog with the document's data for editing\n            return {\n                Class: data[id].Class,\n                Title: data[id].Title,\n                Link: data[id].Link,\n                Notes: data[id].Notes,\n                _id: data[id]._id\n            }\n        }\n    }\n    \n    const [row, setRow]   = useState(initialRow())\n    const [open, setOpen] = React.useState(false)\n  \n    const handleClickOpen = () => {\n        setOpen(true)\n    }\n\n    const handleClose = () => {\n        setOpen(false)\n    }\n\n    const handleAdd = event => {\n        handleClose()\n        handleSubmit(row)\n        resetRow()\n    }\n\n    const resetRow = () => {\n        setRow(initialRow())\n    }\n\n    // adding a new document to the state and DB\n    const handleSubmit = row => {\n        axios.post('https://stark-anchorage-94670.herokuapp.com/addData', row)\n            .then((response) => {\n                console.log(\"Add Data:\", response.status)\n                let objectID = response.data.ops[0]._id\n                \n                // add ID field to state\n                row._id = objectID\n                \n                // add row to table state (handles alerts)\n                addRow(row)\n            })\n            .catch((err) => {\n                console.log(err)\n                alertSetter(true, \"error\", \"Error adding data\")\n            })\n    }\n\n    // updating an existing document in the state and DB\n    const handleChange = name => ({ target: { value } }) => {\n        setRow({ ...row, [name]: value })\n    }\n\n    const handleEditSave = event => {\n        handleClose()\n        setData((prev) =>\n            prev.map(function callback(oldrow, index) {\n                if (index === id) {\n                    return {\n                        ...prev[index] = row,\n                    };\n                }\n                return oldrow;\n            })\n        );\n\n        axios.post('https://stark-anchorage-94670.herokuapp.com/updateData', row)\n            .then((response) => {\n                console.log(\"Update Data:\", response.status, response)\n                if (response.status == 200) {\n                    alertSetter(true, \"success\", \"Data successfully updated!\")\n                } else {\n                    alertSetter(true, \"error\", \"Error updating data\")\n                }\n            })\n            .catch((err) => {\n                console.log(err)\n                alertSetter(true, \"error\", \"Error updating data\")\n            })\n    }\n\n    return (\n        <div>\n            {add ? (\n                <Tooltip title=\"Add\">\n                    <Button className=\"addDataForm\" onClick={handleClickOpen} variant=\"outlined\" color=\"primary\" size=\"large\" startIcon={<AddCircleOutlineIcon fontSize=\"large\"/>}>\n                        Document\n                        </Button>\n                </Tooltip>\n            ) : (\n                <Tooltip title=\"Edit\">\n                    <Button aria-label=\"edit\" onClick={handleClickOpen} variant=\"outlined\" color=\"secondary\">\n                        <EditIcon />\n                    </Button>\n                </Tooltip>\n                )\n            }\n\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\">{add ? (\"Add New Document\") : (\"Edit Document\")}\n                </DialogTitle>\n                <DialogContent>\n                    <TextField autoFocus margin=\"dense\" label=\"Class\" type=\"text\" fullWidth\n                        value={row.Class} // displays value from state\n                        onChange={handleChange('Class')} //sets state's field with value entered e.g. setRow(row.class: value) \n                    />\n                    \n                    <TextField margin=\"dense\" label=\"Title\" type=\"text\" fullWidth value={row.Title} onChange={handleChange('Title')} />\n                    \n                    <TextField margin=\"dense\" label=\"Notes\" type=\"text\" fullWidth value={row.Notes} onChange={handleChange('Notes')} multiline />\n                    \n                    <TextField margin=\"dense\" label=\"Link\" type=\"text\" fullWidth value={row.Link} onChange={handleChange('Link')}\n                    />\n                \n                </DialogContent>\n\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        Cancel\n                    </Button>\n                    {add ? (\n                        <Button onClick={handleAdd} color=\"primary\">\n                            Save\n                        </Button>\n                    ) : (\n                        <Button onClick={handleEditSave} color=\"primary\">\n                            Update\n                        </Button>)}\n                </DialogActions>\n            </Dialog>\n        </div>\n    )\n}\n\nAddUserDialog.propTypes = {\n    // addUserHandler: PropTypes.func.isRequired,\n}\n\nexport default AddUserDialog\n","import React from 'react'\nimport AddUserDialog from './AddDialog'\nimport clsx from 'clsx'\nimport DeleteIcon from '@material-ui/icons/Delete'\n// import GlobalFilter from './GlobalFilter'\nimport IconButton from '@material-ui/core/IconButton'\nimport { lighten, makeStyles } from '@material-ui/core/styles'\nimport PropTypes from 'prop-types'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport SendIcon from '@material-ui/icons/Send';\nimport TextField from '@material-ui/core/TextField';\nimport { RiShareForwardFill } from 'react-icons/ri'\n\n\n\nconst useToolbarStyles = makeStyles(theme => ({\n    root: {\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(1),\n    },\n    highlight:\n        theme.palette.type === 'light' ?\n            {\n                color: theme.palette.primary.main,\n                backgroundColor: lighten(theme.palette.primary.light, 0.85),\n            }\n            :\n            {\n                color: theme.palette.text.primary,\n                backgroundColor: theme.palette.secondary.dark,\n            },\n    title: {\n        flex: '1 1 100%',\n    },\n    search: {\n        position: \"absolute\",\n        right: \"60px\"\n    },\n    toolbar: {\n        position: \"sticky\",\n        top: \"0\",\n        zIndex: 1,\n        width: \"100%\",\n        height:\"50px\"\n    }\n}))\n\nconst TableToolbar = props => {\n    const classes = useToolbarStyles()\n\n    const {\n        numSelected,\n        deleteUserHandler,\n        selectedRows,\n        addRow,\n        rows,\n        handleFilterChange,\n        filterInput,\n        alertSetter\n    } = props\n\n    return (\n        <Toolbar className={clsx(classes.root, {[classes.highlight]: numSelected > 0}, classes.toolbar)}>\n            {numSelected > 0 ? (\n                <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\">\n                    {numSelected} items selected\n                </Typography>\n            ) : (\n                <>\n                <AddUserDialog addRow={addRow} add={true} alertSetter={alertSetter} />\n                    \n                <TextField\n                    id=\"outlined-search\"\n                    label={`Search ${rows.length} records...`}\n                    type=\"search\"\n                    variant=\"outlined\"\n                    name=\"searchField\"\n                    className={clsx(classes.search)}\n                    value={filterInput}\n                    onChange={handleFilterChange}\n                />    \n                </>\n                )}\n\n            {numSelected > 0 ? (\n                <>\n                <Tooltip title=\"Delete\">\n                    <IconButton aria-label=\"delete\" onClick={deleteUserHandler}> \n                        <DeleteIcon color=\"secondary\"/>\n                    </IconButton>\n                </Tooltip>\n                \n                <Tooltip title=\"Share\">\n                    <IconButton aria-label=\"share\" > \n                        <RiShareForwardFill color=\"#3F50B5\"/>\n                    </IconButton>\n                </Tooltip>\n                {console.log(\"selectedRows\",selectedRows)}\n                </>\n            ) : (null)}\n        </Toolbar>\n    )\n}\n\nTableToolbar.propTypes = {\n    numSelected: PropTypes.number.isRequired,\n    deleteUserHandler: PropTypes.func.isRequired,\n}\n\nexport default TableToolbar\n","import React, { useState } from \"react\"\nimport { useFilters, useSortBy, useTable, useRowSelect } from \"react-table\"\nimport './Table.css'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport TableToolbar from './toolbar'\nimport axios from 'axios';\n\n\nexport default function Table({\n    columns,\n    data,\n    updateMyData,\n    setData,\n    setShowAlert,\n    alertSetter,\n    addRow\n    }) {\n\n    const IndeterminateCheckbox = React.forwardRef(\n        ({ indeterminate, ...rest }, ref) => {\n            const defaultRef = React.useRef()\n            const resolvedRef = ref || defaultRef\n\n            React.useEffect(() => {\n                resolvedRef.current.indeterminate = indeterminate\n            }, [resolvedRef, indeterminate])\n\n            return (\n                <>\n                    <Checkbox ref={resolvedRef} {...rest} color=\"primary\"/>\n                </>\n            )\n        }\n    )\n\n    // Create a state\n    const [filterInput, setFilterInput] = useState(\"\");\n\n    // Use the state and functions returned from useTable to build your UI\n    const {\n        getTableProps, \n        getTableBodyProps,\n        headerGroups, \n        rows,\n        prepareRow,\n        setFilter,\n        selectedFlatRows,\n        state: { selectedRowIds },\n    } = useTable(\n        {\n            columns,\n            data,\n            updateMyData\n        },\n        useFilters,\n        useSortBy,\n        useRowSelect,\n        hooks => {\n            hooks.allColumns.push(columns => [\n                // makes a column for selection\n                {\n                    id: 'selection',\n                    Header: ({ getToggleAllRowsSelectedProps }) => (\n                        <div maxwidth=\"15px\"> \n                            <IndeterminateCheckbox {...getToggleAllRowsSelectedProps()} />\n                            {/* {console.log(getToggleAllRowsSelectedProps())}   */}\n                        </div>\n                    ),\n                    // The cell can use the individual row's getToggleRowSelectedProps method\n                    // to render a checkbox\n                    Cell: ({ row }) => (\n                        <div maxwidth=\"15px\">\n                            <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\n                        </div>\n                    ),\n                },\n                ...columns,\n            ])\n        }\n    )\n\n    // Update the state when input changes\n    const handleFilterChange = e => {\n        const value = e.target.value || undefined;\n        setFilter(\"Title\", value)\n        setFilterInput(value);\n    };\n\n    // add more functions here that use selectedRowIDs for example, pass them as props\n    // to component\n    \n    // multi-delete from table: pass setData to update table state, create new POST function\n    const removeByIndexs = (array, indexs) =>\n        array.filter((_, i) => !indexs.includes(i))\n\n    const deleteUserHandler = event => {\n        if (window.confirm('Are you sure you wish to delete these items?')) {\n            const newData = removeByIndexs(\n                data,\n                Object.keys(selectedRowIds).map(x => parseInt(x, 10))\n            )\n            setData(newData)\n        \n            let list = []\n            for (let i in selectedFlatRows) {\n                list.push(selectedFlatRows[i].original._id)\n            }\n            console.log(\"list:\" , list)\n\n            axios.post('https://stark-anchorage-94670.herokuapp.com/deleteMany', list)\n                 .then((result) => {\n                    if (result.status == 200) {\n                        console.log(\"success deleting many\")\n                        setShowAlert({\n                            show: true,\n                            type: \"success\",\n                            message: \"Success deleting items!\",\n                        });\n                    } else {\n                        setShowAlert({\n                            show: true,\n                            type: \"error\",\n                            message: \"Error deleting items!\",\n                        });\n                    }\n                })\n        }\n    }\n    \n    return (\n        <>\n            <TableToolbar\n                numSelected={Object.keys(selectedRowIds).length}\n                deleteUserHandler={deleteUserHandler}\n                selectedRows={selectedFlatRows}\n                addRow={addRow}\n                rows={rows}\n                filterInput={filterInput}\n                handleFilterChange={handleFilterChange}\n                alertSetter={alertSetter}\n            />  \n\n        <table {...getTableProps()}>\n            <thead>\n                {headerGroups.map(headerGroup => (\n                    <tr {...headerGroup.getHeaderGroupProps()}>\n                        {headerGroup.headers.map(column => (\n                            <th {...column.getHeaderProps(column.getSortByToggleProps())}\n                                className={\n                                    column.isSorted\n                                        ? column.isSortedDesc\n                                            ? \"sort-desc\"\n                                            : \"sort-asc\"\n                                        : \"\"\n                                }\n                            >\n                                {column.render(\"Header\")}\n                                {/* Render the columns filter UI */}\n                                <div>{column.canFilter ? column.render('Filter') : null}</div>\n                        </th>\n                    ))}\n                   </tr>\n                )\n                )} \n            </thead>\n            <tbody {...getTableBodyProps()}>\n                {\n                    rows.map((row, i) => {\n                        prepareRow(row)\n                        return (\n                            <tr {...row.getRowProps()}>\n                                {row.cells.map(cell => {\n                                    return <td {...cell.getCellProps()}>\n                                        {cell.render(\"Cell\")}\n                                    </td>\n                                })}\n                            </tr>\n                        )\n                    })}\n                </tbody>\n            </table>\n            {/* <p>Selected Rows: {Object.keys(selectedRowIds).length}\n                {console.log((selectedFlatRows))} </p> */}\n\n            {/* <pre>\n                <code>\n                    {JSON.stringify(\n                        {\n                            selectedRowIds: selectedRowIds,\n                            'selectedFlatRows[]': selectedFlatRows.map(\n                                d => d.original\n                            ),\n                        },\n                        null,\n                        2\n                    )}\n                </code>\n            </pre> */}\n        </>\n    )\n}","import React from 'react'\n\nconst Genres = ({ values }) => {\n    return (\n        <>\n            <span className={values ? \"badge\" : \"\"}>\n                {values}\n            </span>\n        </>\n    )\n}\n\nexport default Genres","import React from 'react'\nimport { Alert } from '@material-ui/lab/';\nimport \"./showAlert.css\"\n\nconst ShowAlert = ({ state, setter }) => {\n    if (state.show === true) {\n        return (\n            <div>\n                {/* to include a Close button, add to alert: onClose={() => setter(false)} */}\n                <Alert className=\"alert\" severity={state.type} variant=\"filled\"> \n                    {state.message}\n                </Alert>\n            </div>\n        );\n    } else {\n        return (\n            <></>\n        )\n    }\n    \n}\n\nexport default ShowAlert","import React from 'react'\nimport { useFilters, useGlobalFilter } from 'react-table'\nimport { makeStyles } from '@material-ui/core/styles';\nimport './filterList.css'\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\n\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n        margin: theme.spacing(1),\n        display: 'flex',\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n    Select: {\n        maxwidth: 20,\n    }\n}));\n\n\n// This is a custom filter UI for selecting\n// a unique option from a list\nfunction SelectColumnFilter({\n    column: { filterValue, setFilter, preFilteredRows, id },\n}) {\n\n    const classes = useStyles();\n\n    // Calculate the options for filtering\n    // using the preFilteredRows\n    const options = React.useMemo(() => {\n        const options = new Set()\n\n        preFilteredRows.forEach(row => {\n            options.add(row.values[id])\n        })\n        return [...options.values()]\n    }, [id, preFilteredRows])\n\n    // Render a multi-select box\n    return (\n        <FormControl className={classes.formControl}>\n            <Select className={classes.Select}\n                // className={classes.Select}\n                value={filterValue}\n                defaultValue=\"undefined\"\n                onChange={e => {\n                    setFilter(e.target.value || undefined)\n                }}\n            >\n                <MenuItem defaultValue=\"\">All</MenuItem>\n\n                {options.map((option, i) => (\n                    <MenuItem key={i} value={option}>\n                        {option}\n                    </MenuItem>\n                ))}\n            </Select>\n        </FormControl>\n    )\n}\n\nexport default SelectColumnFilter","import React from 'react'\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddUserDialog from './AddDialog'\nimport Button from '@material-ui/core/Button'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport './actions.css'\n\nfunction Actions({ value, removeRow, addRow, data, id, setData, alertSetter }) {\n    return (\n        <>\n            <div className=\"actions\">\n                <AddUserDialog add={false} addRow={addRow} data={data} id={id} setData={setData} alertSetter={alertSetter}/>\n                \n                <Tooltip title=\"Delete\">\n                    <Button value={value} onClick={removeRow} variant=\"outlined\" color=\"primary\">\n                        <DeleteIcon/>\n                    </Button>\n                </Tooltip>\n            </div>\n        </> \n    )\n}\n\nexport default Actions","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n// import './NewLogin.css';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\n\nasync function loginUser(credentials) {\n    // Local: http://localhost:3000/login\n    return fetch('https://stark-anchorage-94670.herokuapp.com/login', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(credentials)\n    })\n        .then(data => data.json())\n}\n\n// function OldLogin({ setToken, alertSetter }) {\n//     const [username, setUserName] = useState();\n//     const [password, setPassword] = useState();\n\n//     const handleSubmit = async e => {\n//         e.preventDefault();\n//         const token = await loginUser({ username, password });\n\n//         if (token.token == \"validToken\") {\n//             alertSetter(true, \"success\", \"Success logging in\")\n//             console.log(\"token: \", token)\n//             setToken(token);\n\n//         } else {\n//             alertSetter(true, \"error\", \"Error logging in\")\n//         }\n//     }\n\n//     return (\n//         <div className=\"login-wrapper\">\n//             <h1>Please Log In</h1>\n//             {/* <form onSubmit={handleSubmit}>\n//                 <label>\n//                     <p>Username</p>\n//                     <input type=\"text\" onChange={e => setUserName(e.target.value)}/>\n//                 </label>\n//                 <label>\n//                     <p>Password</p>\n//                     <input type=\"password\" onChange={e => setPassword(e.target.value)}/>\n//                 </label>\n//                 <div>\n//                     <button type=\"submit\">Submit</button>\n//                 </div>\n//             </form> */}\n//             {/* <SignIn /> */}\n//         </div>\n//     )\n// }\n\n// NewLogin.propTypes = {\n//     setToken: PropTypes.func.isRequired\n// }\n\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(1),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n}));\n\n\nexport default function NewLogin({ setToken, alertSetter }) {\n    const [username, setUserName] = useState();\n    const [password, setPassword] = useState();\n\n    const handleSubmit = async e => {\n        e.preventDefault();\n        const token = await loginUser({ username, password });\n\n        if (token.token == \"validToken\") {\n            alertSetter(true, \"success\", \"Welcome!\")\n            console.log(\"token: \", token)\n            setToken(token);\n\n        } else {\n            alertSetter(true, \"error\", \"Error logging in\")\n        }\n    }\n\n    const classes = useStyles();\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <CssBaseline />\n            <div className={classes.paper}>\n                <Avatar className={classes.avatar}>\n                    <LockOutlinedIcon />\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Sign in\n                </Typography>\n                <form className={classes.form} noValidate onSubmit={handleSubmit}>\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        id=\"username\"\n                        label=\"username\"\n                        name=\"username\"\n                        autoComplete=\"username\"\n                        autoFocus\n                        onChange={e => setUserName(e.target.value)}\n                    />\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        name=\"password\"\n                        label=\"Password\"\n                        type=\"password\"\n                        id=\"password\"\n                        autoComplete=\"current-password\"\n                        onChange={e => setPassword(e.target.value)}\n                    />\n                    {/* <FormControlLabel\n                        control={<Checkbox value=\"remember\" color=\"primary\" />}\n                        label=\"Remember me\"\n                    /> */}\n                    <Button\n                        type=\"submit\"\n                        fullWidth\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.submit}\n                    >\n                        Sign In\n                    </Button>\n\n                    {/* <Grid container>\n                        <Grid item xs>\n                            <Link href=\"#\" variant=\"body2\">\n                                Forgot password?\n                            </Link>\n                        </Grid>\n                        <Grid item>\n                            <Link href=\"#\" variant=\"body2\">\n                                {\"Don't have an account? Sign Up\"}\n                            </Link>\n                        </Grid>\n                    </Grid> */}\n                </form>\n            </div>\n            <Box mt={8}>\n                {/* <Copyright /> */}\n            </Box>\n        </Container>\n    );\n}\n\n\nfunction Copyright() {\n    return (\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n            {'Copyright © '}\n            <Link color=\"inherit\" href=\"https://material-ui.com/\">\n                Your Website\n      </Link>{' '}\n            {new Date().getFullYear()}\n            {'.'}\n        </Typography>\n    );\n}","import './App.css';\nimport React, { useMemo, useState, useEffect } from \"react\";\nimport Table from \"./Table\"\nimport axios from 'axios';\nimport Genres from './genres'\nimport Button from '@material-ui/core/Button';\nimport ShowAlert from './showAlert'\nimport SelectColumnFilter from './filterList'\nimport LinkIcon from '@material-ui/icons/Link';\nimport Actions from './actions'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport NewLogin from './NewLogin'\n\n//- Improvements:\n// - don't call /getData until after the user is signed in\n// - login: \n//      - create users in a lookup table vs.hardcoded\n//      - prettify login page\n// - remove empty header row from top\n// - add new row to top of table\n// - group documents in same classes to shrink table size\n\n// - Additional Features:\n// - user sign up: create new table in DB\n// - share documents via email\n// - add create/update dates for tracking\n// - add user behavior tracking\n\n\n//!bugs\n//! - can't add two documents back to back: same ID is stored\n\n\n\nfunction App() {\n  // data array stores the data from the DB\n  const [data, setData] = useState([])\n  \n  // store the login token\n  const [token, setToken] = useState();\n  \n  // state for showing alerts\n  const [showAlert, setShowAlert] = useState({\n    show: false,\n    type: \"\",\n    message: \"\"\n  })\n\n  function alertSetter(showValue, typeValue, msgValue) {\n    setShowAlert({\n      show: showValue,\n      type: typeValue,\n      message: msgValue\n    }) \n  }\n\n  // autoclose alerts\n  useEffect(() => {\n    if (showAlert.show == true) {\n      const timeId = setTimeout(() => {\n        // After 2 seconds set the show value to false\n        alertSetter(false)\n      }, 2000)\n\n      return () => {\n        clearTimeout(timeId)\n      }\n    }\n  });\n  \n  \n  // removes one document from the database and the table state\n  function removeRow(e) {\n    e.preventDefault();\n    if (window.confirm('Are you sure you wish to delete this?')) {\n      if (e.currentTarget.value) {\n        let id = \"_id=\" + e.currentTarget.value\n        axios.post('https://stark-anchorage-94670.herokuapp.com/deleteData', id).then((result) => {\n          if (result.status == 200) {\n            alertSetter(true, \"success\", \"Success deleting item!\")\n            console.log(\"Remove Data: \", result.status)\n          } else {\n            alertSetter(true, \"error\", \"Error deleting item!\")\n          }\n        });\n      }\n\n      // remove row from the data state\n      let newArray = data.filter(elem =>\n        elem._id != e.currentTarget.value\n      )\n      setData(newArray)\n    }\n  }\n\n  // add new document to table state\n  function addRow(newRow) {\n    setData(prev => prev.concat(newRow))\n    alertSetter(true, \"success\", \"Success adding row!\")\n  }\n  \n  // not in use: inline editing of cells\n  const updateMyData = (rowIndex, columnId, value) => {\n    e.preventDefault();\n    setData((prev) =>\n      prev.map((row, index) => {\n        if (index === rowIndex) {\n          return {\n            ...prev[rowIndex],\n            [columnId]: value,\n          };\n        }\n        return row;\n      })\n    );\n  };\n\n  // prepares the headers of the table\n  const columns = useMemo(() => [\n    // {\n    //   Header: \"Row #\",\n    //   Cell: ({ row }) => <span>{row.index}</span>,\n    //   Filter: \"\",\n    //   filter: 'includes',\n    // },\n    {\n        Header: \"\",\n        accessor: \"Class\",\n        Filter: SelectColumnFilter,\n        filter: 'includes',\n    },\n    {\n        Header: \"Title\",\n        accessor: \"Title\",\n        Filter: \"\",\n        filter: 'includes',\n    },\n    {\n        Header: \"Notes\",\n        accessor: \"Notes\",\n        Filter: \"\",\n        filter: 'includes',\n    },\n    {\n        Header: \"Link\",\n        accessor: \"Link\",\n        Cell: ({ cell: { value } }) =>\n        <Button href={value} target=\"_blank\" variant=\"outlined\" color=\"primary\">\n            <LinkIcon />\n        </Button>,\n        Filter: \"\",\n        filter: 'includes',\n    },\n    // {\n    //     Header: \"\",\n    //     accessor: \"Categories\",\n    //     // Cell method will provide the cell value; we pass it to render a custom component\n    //     Cell: ({ cell: { value } }) => <Genres values={value} />,\n    //     Filter: SelectColumnFilter,\n    //     filter: 'includes',\n    // },\n    {\n        Header: \"Actions\",\n        accessor: \"_id\",\n        Cell: ({ cell: { value, row } }) => <Actions value={value} removeRow={removeRow} addRow={addRow} data={data} id={row.index} setData={setData} alertSetter={alertSetter}/>,\n        Filter: \"\",\n        filter: 'excludes',\n    },\n  ], [data])\n\n  // Get all data from DB and add it to the state \n  useEffect(() => {(async () => {\n    let testing = false\n    let getData = '';\n    if (testing) {\n      getData = \"http://localhost:3000/getData\";\n    } else {\n      getData = \"https://stark-anchorage-94670.herokuapp.com/getData\";\n    }\n    \n    axios.get(getData)\n         .then((result) => {\n            setData(result.data)\n            console.log(data)\n         }); \n\n  })()\n}, [])\n\n\n  if (!token) {\n      return (\n        <>  \n        <ShowAlert state={showAlert} setter={alertSetter}/>\n        <NewLogin setToken={setToken} alertSetter={alertSetter} />\n        </>\n      )\n  }\n\n    return (\n      <div className=\"App\">\n      <ShowAlert state={showAlert} setter={alertSetter}/>\n      <Table columns={columns} data={data} updateMyData={updateMyData} setData={setData} setShowAlert={setShowAlert} addRow={addRow} alertSetter={alertSetter}\n      />\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/login\">\n            <NewLogin />\n          </Route>\n          <Route path=\"/logout\">\n            <NewLogin />\n          </Route>\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { render } from 'react-dom'\nimport Login from './login';\nimport Logout from './logout';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render((\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n), document.getElementById('root'));\n\n// const Root = () => (\n//   <>\n//     {/* <Login /> */}\n//     <App />\n//     {/* <Logout /> */}\n//   </>\n// )\n// render(\n//   <Root />, document.getElementById('root')\n// )\n"],"sourceRoot":""}